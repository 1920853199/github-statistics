{"version":3,"sources":["reducers/github.js","reducers/index.js","components/DataTypes.js","components/sections/Colors.js","scripts/GithubFetcher.js","components/sections/Repository.js","components/sections/ChartOptions.js","components/sections/Star.js","components/sections/Fork.js","components/sections/Commit.js","components/sections/Release.js","components/DataSection.js","components/GithubStatistics.js","actions/github.js","components/App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","repoData","repoStats","starData","starStats","forkData","forkStats","releaseData","releaseStats","githubApiToken","github","state","action","type","payload","data","Object","assign","stats","reducers","combineReducers","REPO","STAR","FORK","COMMIT","RELEASE","getProgress","c","t","Math","floor","GithubFetcher","token","searchRepository","input","onResult","a","variables","query","formattedData","gqlClient","request","search","nodes","forEach","repo","push","nameWithOwner","fetchRepositoryData","owner","name","onUpdate","onFinish","onProgress","shouldAbort","repository","createdAt","primaryLanguage","pushedAt","watcherCount","watchers","totalCount","fetchStargazerData","preparationVariables","preparationQuery","Map","pageIndex","totalToFetch","maxIncrement","numberFetched","previousEndCursor","hasNextPage","preparationData","stargazers","handleEdge","edge","date","Date","starredAt","slice","getTime","has","set","get","edges","pageInfo","endCursor","liveUpdate","pagesPerUpdate","total","fetchForkData","forks","handleNode","node","fetchCommitData","defaultBranchRef","target","history","headRefOid","oid","since","committedDate","setFullYear","getFullYear","toISOString","object","fetchReleaseData","totalDownloads","releases","releaseAssets","asset","id","updatedAt","contentType","downloadCount","totalAssets","tagName","this","GraphQLClient","headers","Authorization","Repository","_render","props","ready","Array","from","entries","map","pair","index","dateSinceCreated","now","valueOf","key","color","COLORS","align","justify","className","title","value","toDateString","moment","fromNow","prefix","React","Component","text","undefined","legend","itemStyle","fontWeight","colors","tooltip","shadow","split","credits","enabled","Star","_renderStatistics","averagePerDay","precision","_renderCharts","values","includes","highcharts","Highcharts","options","OPTIONS","chart","events","selection","event","resetSelection","setState","arr","cloneMap","min","xAxis","max","resetData","zoomType","yAxis","gridLineWidth","series","dataArray","isReset","nextProps","loading","obj","create","k","v","JSON","parse","stringify","tmpMap","keys","initial","formatter","increment","cumulativeCount","Fork","Commit","reverse","Release","averageDownloadsPerDay","columns","dataSource","pagination","dataIndex","render","time","format","DataSection","_fetch","repos","slashIndex","indexOf","fetchCall","_getAllProgress","progress","reduce","b","size","_renderUpdateAllButton","icon","disabled","length","onClick","_renderRepoTags","visible","style","display","percent","showInfo","strokeWidth","width","checked","onChange","_renderBody","body","fetcher","TYPES","fontSize","info","console","log","prevProps","deleteRepo","delete","filter","content","placement","marginLeft","connect","GithubStatistics","splice","localStorage","setItem","addRepo","message","error","_renderTags","closable","onClose","rel","href","_renderHeaderInput","testingRepo","suggestions","hintMessage","inputEmpty","repoExisted","Fragment","placeholder","defaultActiveFirstOption","onSearch","notFoundContent","showArrow","filterOption","showSearch","Option","updateState","_","debounce","leading","trailing","bind","getItem","src","frameBorder","scrolling","height","bounds","Link","dispatch","App","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.c305b3f5.chunk.js","sourcesContent":["const INITIAL_STATE = {\r\n  repoData: [],\r\n  repoStats: {},\r\n\r\n  starData: [],\r\n  starStats: {},\r\n\r\n  forkData: [],\r\n  forkStats: {},\r\n\r\n  releaseData: [],\r\n  releaseStats: {},\r\n\r\n  githubApiToken: '05c1acf261f6b223411c73d8b71cb1a30ce9186a',\r\n\r\n}\r\n\r\nconst github = (state = INITIAL_STATE, action) => {\r\n  const { type, payload } = action\r\n  switch (type) {\r\n    case 'UPDATE_STATE':\r\n      return {\r\n        ...state,\r\n        ...{[payload.state]: payload.data}\r\n      }\r\n    case 'UPDATE_STATS_FIELD':\r\n      return Object.assign({}, state, {\r\n        [payload.state] : {\r\n          ...state[payload.state],\r\n          ...payload.stats\r\n        }\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default github","import { combineReducers } from 'redux'\r\n\r\nimport github from './github'\r\n\r\nconst reducers = combineReducers({\r\n  github: github,\r\n})\r\n\r\nexport default reducers","/**\r\n * Keys are used for reference\r\n * Values are used for displaying and passing\r\n */\r\n\r\nexport default {\r\n  REPO: 'Repository',\r\n  STAR: 'Star',\r\n  FORK: 'Fork',\r\n  COMMIT: 'Commit',\r\n  RELEASE: 'Release',\r\n}","export default [\r\n  '#A2B449',\r\n  '#E89A41',\r\n  '#9EABCD',\r\n  '#56BABD',\r\n  '#D79AB3',\r\n  '#E6978A',\r\n  '#5EBE85',\r\n]","import {  } from 'graphql'\r\nimport { GraphQLClient } from 'graphql-request'\r\n\r\nconst getProgress = (c, t) => t === 0 ? 100 : Math.floor(c / t * 100)\r\n\r\nclass GithubFetcher {\r\n\r\n  constructor(token) {\r\n    const endpoint = 'https://api.github.com/graphql'\r\n\r\n    this.gqlClient = new GraphQLClient(\r\n      endpoint,\r\n      {\r\n        headers: {\r\n          Authorization: 'bearer ' + token,\r\n        }\r\n      }\r\n    )\r\n\r\n    // configurations\r\n    this.liveUpdate = false\r\n    this.pagesPerUpdate = 20\r\n  }\r\n\r\n  /**\r\n   * test if the repository exists\r\n   * @param owner owner of the repository\r\n   * @param name of the repository\r\n   * @param onResult (@param result) function that will be called when test finishes\r\n   * @return false if not exist, true otherwise\r\n   */\r\n  // testRepository = async (owner, name, onResult) => {\r\n  //   const variables = {\r\n  //     owner: owner,\r\n  //     name: name,\r\n  //   }\r\n\r\n  //   const query = /* GraphQL */ `\r\n  //     query getRepository($owner: String!, $name: String!){\r\n  //       repository(owner: $owner, name: $name) {\r\n  //         id\r\n  //       }\r\n  //     }\r\n  //   `\r\n\r\n  //   try {\r\n  //     await this.gqlClient.request(query, variables)\r\n  //   } catch (error) {\r\n  //     if (onResult) {\r\n  //       onResult(false)\r\n  //     }\r\n  //     return false\r\n  //   }\r\n\r\n  //   if (onResult) onResult(true)\r\n  //   return true\r\n  // }\r\n\r\n  /**\r\n   * suggest possible repositories based on current input\r\n   * @param onResult (@param result) function that will be called when search finishes\r\n   */\r\n  searchRepository = async (input, onResult) => {\r\n    const variables = {\r\n      query: input,\r\n    }\r\n\r\n    const query = /* GraphQL */ `\r\n      query searchRepository($query: String!){\r\n        search(query: $query, first: 5, type: REPOSITORY) {\r\n          codeCount\r\n          nodes {\r\n            ...on Repository {\r\n              nameWithOwner\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n    let formattedData = []\r\n\r\n    const data = await this.gqlClient.request(query, variables)\r\n\r\n    data.search.nodes.forEach(repo => formattedData.push(repo.nameWithOwner))\r\n\r\n    if (onResult) onResult(formattedData)\r\n\r\n    return formattedData\r\n  }\r\n\r\n  /**\r\n   * fetch repository low-level data\r\n   * @param owner owner of the repository\r\n   * @param name name of the repository\r\n   * @param onUpdate (data) function that will be called when a new data update is avaiable\r\n   * @param onFinish (stats) function that will be called when fetching is finished\r\n   * @param onProgress (progress) function that will be called when progress is updated\r\n   * @param shouldAbort function that returns a boolean which determines whether fetching should abort\r\n   * @returns Object that contains statistics\r\n   */\r\n  fetchRepositoryData = async (owner, name, onUpdate, onFinish, onProgress, shouldAbort) => {\r\n    const variables = {\r\n      owner: owner,\r\n      name: name,\r\n    }\r\n\r\n    // define the graphql query\r\n    const query = /* GraphQL */ `\r\n      query getRepository($owner: String!, $name: String!){\r\n        repository(owner: $owner, name: $name) {\r\n          nameWithOwner\r\n          createdAt\r\n          primaryLanguage {\r\n            name\r\n          }\r\n          pushedAt\r\n          watchers(first: 0) {\r\n            totalCount\r\n          }\r\n        }\r\n      }\r\n    `\r\n\r\n    // update progress tracking\r\n    if (onProgress) onProgress(10)\r\n\r\n    const data = await this.gqlClient.request(query, variables)\r\n    // if (shouldAbort) {\r\n    //   if (shouldAbort()) {\r\n    //     return\r\n    //   }\r\n    // }\r\n\r\n    const formattedData = {\r\n      name: data.repository.nameWithOwner,\r\n      createdAt: data.repository.createdAt,\r\n      primaryLanguage: data.repository.primaryLanguage.name,\r\n      pushedAt: data.repository.pushedAt,\r\n      watcherCount: data.repository.watchers.totalCount,\r\n    }\r\n\r\n    // update progress tracking\r\n    if (onProgress) onProgress(100)\r\n\r\n    if (onFinish) onFinish(formattedData)\r\n\r\n    return formattedData\r\n  }\r\n\r\n  /**\r\n   * fetch repository low-level data\r\n   * @param owner owner of the repository\r\n   * @param name name of the repository\r\n   * @param onUpdate (data) function that will be called when a new data update is avaiable\r\n   * @param onFinish (stats) function that will be called when fetching is finished\r\n   * @param onProgress (progress) function that will be called when progress is updated\r\n   * @param shouldAbort function that returns a boolean which determines whether fetching should abort\r\n   * @returns Object that contains statistics\r\n   */\r\n  fetchStargazerData = async (owner, name, onUpdate = () => {}, onFinish, onProgress, shouldAbort) => {\r\n    const preparationVariables = {\r\n      owner: owner,\r\n      name: name,\r\n    }\r\n\r\n    // define the graphql query\r\n    const preparationQuery = /* GraphQL */ `\r\n      query prepareStargazers($owner: String!, $name: String!){\r\n        repository(owner: $owner, name: $name) {\r\n          createdAt\r\n          stargazers(first: 0) {\r\n            totalCount\r\n          }\r\n        }\r\n      }\r\n    `\r\n    const query = /* GraphQL */ `\r\n      query getStargazers($owner: String!, $name: String!, $previousEndCursor: String){\r\n        repository(owner: $owner, name: $name) {\r\n          stargazers(first: 100, after: $previousEndCursor) {\r\n            pageInfo {\r\n              endCursor\r\n              hasNextPage\r\n            }\r\n            edges {\r\n              starredAt\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n\r\n    // local variables\r\n    const formattedData = new Map()\r\n    let pageIndex = 0\r\n    let totalToFetch = 0\r\n    let maxIncrement = 0\r\n    let numberFetched = 0\r\n    let previousEndCursor = null\r\n    let hasNextPage = false\r\n\r\n    // Preparation query\r\n    const preparationData = await this.gqlClient.request(preparationQuery, preparationVariables)\r\n\r\n    // from preparation\r\n    totalToFetch = preparationData.repository.stargazers.totalCount\r\n    const createdAt = preparationData.repository.createdAt\r\n\r\n    const handleEdge = edge => {\r\n      const date = new Date(edge.starredAt.slice(0,10)).getTime() // ISO-8601 encoded UTC date string\r\n      if (!formattedData.has(date)) {\r\n        formattedData.set(date, 1)\r\n      } else {\r\n        formattedData.set(date, formattedData.get(date) + 1)\r\n      }\r\n      if (formattedData.get(date) > maxIncrement) maxIncrement = formattedData.get(date)\r\n      // update progress tracking\r\n      numberFetched += 1\r\n    }\r\n\r\n    // data traversal, 100 edges/request\r\n    do {\r\n      if (shouldAbort) if (shouldAbort()) return\r\n\r\n      const variables = {\r\n        owner: owner,\r\n        name: name,\r\n        previousEndCursor: previousEndCursor\r\n      }\r\n      // query for data\r\n      const data = await this.gqlClient.request(query, variables)\r\n\r\n      data.repository.stargazers.edges.forEach(handleEdge)\r\n\r\n      // update progress tracking\r\n      if (onProgress) onProgress(getProgress(numberFetched, totalToFetch))\r\n\r\n      // track loop-level variables\r\n      previousEndCursor = data.repository.stargazers.pageInfo.endCursor\r\n      hasNextPage = data.repository.stargazers.pageInfo.hasNextPage\r\n      // update pageIndex\r\n      pageIndex += 1\r\n\r\n      // onUpdate callback if existed\r\n      if (this.liveUpdate && onUpdate && pageIndex % this.pagesPerUpdate === 0) {\r\n        onUpdate(formattedData)\r\n      }\r\n    } while (hasNextPage)\r\n\r\n    if (onUpdate) onUpdate(formattedData)\r\n    if (onFinish) onFinish({\r\n      total: totalToFetch,\r\n      maxIncrement,\r\n      createdAt,\r\n    })\r\n\r\n    return formattedData\r\n  }\r\n\r\n  /**\r\n   * fetch fork data\r\n   * @param owner owner of the repository\r\n   * @param name name of the repository\r\n   * @param onUpdate (data) function that will be called when a new data update is avaiable\r\n   * @param onFinish (stats) function that will be called when fetching is finished\r\n   * @param onProgress (progress) function that will be called when progress is updated\r\n   * @param shouldAbort function that returns a boolean which determines whether fetching should abort\r\n   * @returns Object that contains statistics\r\n   */\r\n  fetchForkData = async (owner, name, onUpdate, onFinish, onProgress, shouldAbort) => {\r\n    const preparationVariables = {\r\n      owner: owner,\r\n      name: name,\r\n    }\r\n\r\n    // define the graphql query\r\n    const preparationQuery = /* GraphQL */ `\r\n      query prepareForks($owner: String!, $name: String!){\r\n        repository(owner: $owner, name: $name) {\r\n          createdAt\r\n          forkCount\r\n          forks(first: 0) {\r\n            totalCount\r\n          }\r\n        }\r\n      }\r\n    `\r\n    const query = /* GraphQL */ `\r\n      query getForks($owner: String!, $name: String!, $previousEndCursor: String){\r\n        repository(owner: $owner, name: $name) {\r\n          forks(first: 100, after: $previousEndCursor) {\r\n            pageInfo {\r\n              endCursor\r\n              hasNextPage\r\n            }\r\n            nodes {\r\n              createdAt\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n\r\n    // local variables\r\n    const formattedData = new Map()\r\n    let pageIndex = 0\r\n    let totalToFetch = 0\r\n    let maxIncrement = 0\r\n    let numberFetched = 0\r\n    let previousEndCursor = null\r\n    let hasNextPage = false\r\n\r\n    // Preparation query\r\n    const preparationData = await this.gqlClient.request(preparationQuery, preparationVariables)\r\n\r\n    // from preparation\r\n    totalToFetch = preparationData.repository.forks.totalCount\r\n    const createdAt = preparationData.repository.createdAt\r\n    \r\n\r\n\r\n    const handleNode = node => {\r\n      const date = new Date(node.createdAt.slice(0,10)).getTime() // ISO-8601 encoded UTC date string\r\n      if (!formattedData.has(date)) {\r\n        formattedData.set(date, 1)\r\n      } else {\r\n        formattedData.set(date, formattedData.get(date) + 1)\r\n      }\r\n      if (formattedData.get(date) > maxIncrement) maxIncrement = formattedData.get(date)\r\n      // update progress tracking\r\n      numberFetched += 1\r\n    }\r\n\r\n    // data traversal, 100 edges/request\r\n    do {\r\n      if (shouldAbort) if (shouldAbort()) return\r\n\r\n      const variables = {\r\n        owner: owner,\r\n        name: name,\r\n        previousEndCursor: previousEndCursor\r\n      }\r\n      // query for data\r\n      const data = await this.gqlClient.request(query, variables)\r\n\r\n      data.repository.forks.nodes.forEach(handleNode)\r\n\r\n      // update progress tracking\r\n      if (onProgress) onProgress(getProgress(numberFetched, totalToFetch))\r\n\r\n      // track loop-level variables\r\n      previousEndCursor = data.repository.forks.pageInfo.endCursor\r\n      hasNextPage = data.repository.forks.pageInfo.hasNextPage\r\n\r\n      // update pageIndex\r\n      pageIndex += 1\r\n\r\n      // onUpdate callback if existed\r\n      if (this.liveUpdate && onUpdate && pageIndex % this.pagesPerUpdate === 0) {\r\n        onUpdate(formattedData)\r\n      }\r\n    } while (hasNextPage)\r\n\r\n    if (onUpdate) onUpdate(formattedData)\r\n    if (onFinish) onFinish({\r\n      total: totalToFetch,\r\n      maxIncrement,\r\n      createdAt,\r\n    })\r\n\r\n    return formattedData\r\n  }\r\n\r\n  /**\r\n   * fetch repository low-level data\r\n   * @param owner owner of the repository\r\n   * @param name name of the repository\r\n   * @param onUpdate (data) function that will be called when a new data update is avaiable\r\n   * @param onFinish (stats) function that will be called when fetching is finished\r\n   * @param onProgress (progress) function that will be called when progress is updated\r\n   * @param shouldAbort function that returns a boolean which determines whether fetching should abort\r\n   * @returns Object that contains statistics\r\n   */\r\n  fetchCommitData = async (owner, name, onUpdate, onFinish, onProgress, shouldAbort) => {\r\n    const preparationVariables = {\r\n      owner: owner,\r\n      name: name,\r\n    }\r\n\r\n    // define the graphql query\r\n    const preparationQuery = /* GraphQL */ `\r\n      query prepareCommits($owner: String!, $name: String!) {\r\n        repository(owner: $owner, name: $name) {\r\n          defaultBranchRef {\r\n            # name\r\n            target {\r\n              ... on Commit {\r\n                oid\r\n                committedDate\r\n                history {\r\n                  totalCount\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n    const query = /* GraphQL */ `\r\n      query getCommits($owner: String!, $name: String!, $previousEndCursor: String, $oid: GitObjectID!, $since: GitTimestamp!){\r\n        repository(owner: $owner, name: $name) {\r\n          object(oid: $oid) {\r\n            ... on Commit {\r\n              history(first: 100, after: $previousEndCursor, since: $since ) {\r\n                totalCount\r\n                pageInfo {\r\n                  endCursor\r\n                  hasNextPage\r\n                }\r\n                nodes {\r\n                  committedDate\r\n                  # message\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n\r\n\r\n    // local variables\r\n    const formattedData = new Map()\r\n    let pageIndex = 0\r\n    let totalToFetch = 0\r\n    let numberFetched = 0\r\n    let maxIncrement = 0\r\n    let previousEndCursor = null\r\n    let hasNextPage = false\r\n\r\n    // Preparation query\r\n    const preparationData = await this.gqlClient.request(preparationQuery, preparationVariables)\r\n\r\n    // from preparation\r\n    totalToFetch = preparationData.repository.defaultBranchRef.target.history.totalCount\r\n    const headRefOid = preparationData.repository.defaultBranchRef.target.oid\r\n    const since = new Date(new Date(preparationData.repository.defaultBranchRef.target.committedDate)\r\n      .setFullYear(new Date(preparationData.repository.defaultBranchRef.target.committedDate).getFullYear() - 1))\r\n      .toISOString()\r\n\r\n    const handleNode = node => {\r\n      const date = new Date(node.committedDate.slice(0,10)).getTime() // ISO-8601 encoded UTC date string\r\n      if (!formattedData.has(date)) {\r\n        formattedData.set(date, 1)\r\n      } else {\r\n        formattedData.set(date, formattedData.get(date) + 1)\r\n      }\r\n      if (formattedData.get(date) > maxIncrement) maxIncrement = formattedData.get(date)\r\n      // update progress tracking\r\n      numberFetched += 1\r\n    }\r\n\r\n    // data traversal, 100 edges/request\r\n    do {\r\n      if (shouldAbort) if (shouldAbort()) return\r\n\r\n      const variables = {\r\n        owner: owner,\r\n        name: name,\r\n        oid: headRefOid,\r\n        since: since,\r\n        previousEndCursor: previousEndCursor\r\n      }\r\n      // query for data\r\n      const data = await this.gqlClient.request(query, variables)\r\n\r\n      totalToFetch = data.repository.object.history.totalCount\r\n      data.repository.object.history.nodes.forEach(handleNode)\r\n\r\n      // update progress tracking\r\n      if (onProgress) onProgress(getProgress(numberFetched, totalToFetch))\r\n\r\n      // track loop-level variables\r\n      previousEndCursor = data.repository.object.history.pageInfo.endCursor\r\n      hasNextPage = data.repository.object.history.pageInfo.hasNextPage\r\n      // update pageIndex\r\n      pageIndex += 1\r\n\r\n      // onUpdate callback if existed\r\n      if (this.liveUpdate && onUpdate && pageIndex % this.pagesPerUpdate === 0) {\r\n        onUpdate(formattedData)\r\n      }\r\n    } while (hasNextPage)\r\n\r\n    if (onUpdate) onUpdate(formattedData)\r\n    if (onFinish) onFinish({\r\n      total: totalToFetch,\r\n      maxIncrement,\r\n      createdAt: since,\r\n    })\r\n\r\n    return formattedData\r\n  }\r\n\r\n  /**\r\n   * fetch release data\r\n   * @param owner owner of the repository\r\n   * @param name name of the repository\r\n   * @param onUpdate (data) function that will be called when a new data update is avaiable\r\n   * @param onFinish (stats) function that will be called when fetching is finished\r\n   * @param onProgress (progress) function that will be called when progress is updated\r\n   * @param shouldAbort function that returns a boolean which determines whether fetching should abort\r\n   * @returns Object that contains statistics\r\n   */\r\n  fetchReleaseData = async (owner, name, onUpdate, onFinish, onProgress, shouldAbort) => {\r\n    const variables = {\r\n      owner: owner,\r\n      name: name,\r\n    }\r\n\r\n    // define the graphql query\r\n    const query = /* GraphQL */ `\r\n      query getRelease($owner: String!, $name: String!){\r\n        repository(owner: $owner, name: $name) {\r\n          releases(first: 1, orderBy:{field:CREATED_AT,direction: DESC}) {\r\n            totalCount\r\n            nodes {\r\n              name\r\n              tagName\r\n              createdAt\r\n              releaseAssets (first: 20) {\r\n                totalCount\r\n                nodes {\r\n                  id\r\n                  name\r\n                  updatedAt\r\n                  contentType\r\n                  createdAt\r\n                  downloadCount\r\n                  \r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n\r\n    // local variables\r\n    const formattedData = []\r\n    let totalToFetch = 0\r\n    let numberFetched = 0\r\n    let totalDownloads = 0\r\n\r\n    // Preparation query\r\n    const data = await this.gqlClient.request(query, variables)\r\n    // if (shouldAbort) {\r\n    //   if (shouldAbort()) {\r\n    //     return\r\n    //   }\r\n    // }\r\n\r\n    if (data.repository.releases.totalCount !== 0) {\r\n      // from preparation\r\n      totalToFetch = data.repository.releases.nodes[0].releaseAssets.totalCount\r\n\r\n      // get stats of each asset\r\n      data.repository.releases.nodes[0].releaseAssets.nodes.forEach(asset => {\r\n        formattedData.push({\r\n          id: asset.id,\r\n          name: asset.name,\r\n          updatedAt: asset.updatedAt,\r\n          contentType: asset.contentType,\r\n          createdAt: asset.createdAt,\r\n          downloadCount: asset.downloadCount,\r\n        })\r\n\r\n        totalDownloads += asset.downloadCount\r\n\r\n        numberFetched += 1\r\n        if (onProgress) onProgress(getProgress(numberFetched, totalToFetch))\r\n      })\r\n\r\n      if (onProgress) onProgress(100)\r\n\r\n      if (onUpdate) onUpdate(formattedData)\r\n\r\n      if (onFinish) onFinish({\r\n        totalAssets: totalToFetch,\r\n        totalDownloads: totalDownloads,\r\n        name: data.repository.releases.nodes[0].name,\r\n        tagName: data.repository.releases.nodes[0].tagName,\r\n        createdAt: data.repository.releases.nodes[0].createdAt\r\n      })\r\n    } else {\r\n      if (onProgress) onProgress(100)\r\n\r\n      if (onUpdate) onUpdate(formattedData)\r\n\r\n      if (onFinish) onFinish({\r\n        totalAssets: totalToFetch,\r\n        totalDownloads: totalDownloads,\r\n      })\r\n    }\r\n\r\n    return formattedData\r\n  }\r\n}\r\n\r\nexport default GithubFetcher","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport moment from 'moment'\r\n\r\nimport { Row, Statistic, Icon, Tag } from 'antd'\r\n\r\nimport COLORS from './Colors'\r\n\r\nclass Repository extends React.Component {\r\n\r\n  _render = () => {\r\n    const { stats, ready } = this.props\r\n\r\n    return (\r\n      <>\r\n      {Array.from(stats.entries()).map((\r\n        (pair, index) => {\r\n          if (ready.get(pair[0])) {\r\n            const { name, createdAt, primaryLanguage, pushedAt, watcherCount } = pair[1]\r\n            const dateSinceCreated = Math.floor((Date.now() - new Date(createdAt).valueOf()) / (24*60*60*1000))\r\n\r\n            return (\r\n              <div key={`repo-${pair[0]}`}>\r\n                <Row>\r\n                  <Tag color={COLORS[index]}>\r\n                    {pair[0]}\r\n                  </Tag>\r\n                </Row>\r\n                <Row type=\"flex\" align=\"middle\" justify=\"space-between\">\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Repository\" value={name} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Date created\" value={new Date(createdAt).toDateString()} />                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Days since created\" value={dateSinceCreated} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Primary language\" value={primaryLanguage} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Last push at\" value={moment(pushedAt).fromNow()} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Watchers\" prefix={<Icon type=\"eye\"/>} value={watcherCount} />\r\n                  </span>\r\n                </Row>\r\n              </div>\r\n            )\r\n          }\r\n          return false\r\n        }\r\n      ))}\r\n      </>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      {this._render()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nRepository.propTypes = {\r\n  id: PropTypes.string,\r\n  repos: PropTypes.array,\r\n  data: PropTypes.objectOf(Map),\r\n  stats: PropTypes.objectOf(Map),\r\n  ready: PropTypes.objectOf(Map),\r\n}\r\n\r\n\r\nexport default Repository","/**\r\n * Common highchart options shared by\r\n * most of the charts\r\n */\r\n\r\nimport COLORS from './Colors'\r\n\r\nexport default {\r\n  title: {\r\n    text: undefined,\r\n  },\r\n  // xAxis: {\r\n  //   type: 'datetime',\r\n  // },\r\n  legend: {\r\n    itemStyle: {\r\n      color: 'rgba(0, 0, 0, 0.85)',\r\n      fontWeight: '300'\r\n    }\r\n  },\r\n  colors: COLORS,\r\n  tooltip: {\r\n    shadow: false,\r\n    split: true,\r\n  },\r\n  credits: {\r\n    enabled: false,\r\n  },\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Row, Statistic, Icon, Tag } from 'antd'\r\n// import { LineChart, Line, CartesianGrid, XAxis, YAxis, ResponsiveContainer, Legend, Tooltip as ChartToolTip } from 'recharts'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nimport COLORS from './Colors'\r\nimport OPTIONS from './ChartOptions'\r\n\r\n\r\nclass Star extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isReset: false,\r\n      arr: []\r\n    }\r\n  }\r\n  static formatter = (repo, data) => {\r\n    // star total data, index 0\r\n    let total = { name: repo, data: [] }\r\n    // star  daily increment data, index 1\r\n    let increment = { name: repo, data: [] }\r\n\r\n    let cumulativeCount = 0\r\n    data.forEach((value, key) => {\r\n      cumulativeCount += value\r\n      total.data.push([key, cumulativeCount])\r\n      increment.data.push([key, value])\r\n    })\r\n    \r\n    return [total, increment]\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return !nextProps.loading && !Array.from(nextProps.ready.values()).includes(false)\r\n  }\r\n  cloneMap(map) {\r\n    let obj = Object.create(null);\r\n    for (let [k, v] of map) {\r\n      obj[k] = v;\r\n    }\r\n    obj = JSON.parse(JSON.stringify(obj));\r\n    let tmpMap = new Map();\r\n    for (let k of Object.keys(obj)) {\r\n      tmpMap.set(k, obj[k]);\r\n    }\r\n    return tmpMap;\r\n  }\r\n  componentWillReceiveProps(props) {\r\n    this.setState({\r\n      arr: this.cloneMap(props.data)\r\n    })\r\n  }\r\n\r\n  resetData(min, max) {\r\n    Array.from(this.state.arr.values()).map(dataArray => dataArray[0]).forEach((value, index) => {\r\n      let initial = 0\r\n      value.data.forEach((obj, index) => {\r\n        if (min <= obj[0] && max >= obj[0]) {\r\n          if (!initial) {\r\n            initial = obj[1]\r\n            value.data[index-1] = 0\r\n          }\r\n        }\r\n        if (obj) {\r\n          obj[1] -= initial          \r\n        }\r\n      })\r\n    })\r\n    this.setState({\r\n      isReset: true\r\n    })\r\n  }\r\n  _renderStatistics = () => {\r\n    const { stats, ready } = this.props\r\n\r\n    return (\r\n      <>\r\n        {Array.from(stats.entries()).map((\r\n          (pair, index) => {\r\n            if (ready.get(pair[0])) {\r\n              const { total, maxIncrement, createdAt } = pair[1]\r\n              const dateSinceCreated = Math.floor((Date.now() - new Date(createdAt).valueOf()) / (24 * 60 * 60 * 1000))\r\n              const averagePerDay = total / dateSinceCreated\r\n              return (\r\n                <div key={`star-statistics-${pair[0]}`}>\r\n                  <Row>\r\n                    <Tag color={COLORS[index]}>\r\n                      {pair[0]}\r\n                    </Tag>\r\n                    <Row type=\"flex\" align=\"middle\" justify=\"space-between\">\r\n                      <span className=\"stats-card\">\r\n                        <Statistic title=\"Total stars\" value={total} prefix={<Icon type=\"star\" />} />\r\n                      </span>\r\n                      <span className=\"stats-card\">\r\n                        <Statistic title=\"Avg. stars/day\" value={averagePerDay} precision={2} />\r\n                      </span>\r\n                      <span className=\"stats-card\">\r\n                        <Statistic title=\"Max. stars/day\" value={maxIncrement} />\r\n                      </span>\r\n                    </Row>\r\n                  </Row>\r\n                </div>\r\n              )\r\n            }\r\n            return false\r\n          }\r\n        ))}\r\n      </>\r\n    )\r\n  }\r\n\r\n  _renderCharts = () => {\r\n    const { data, ready } = this.props\r\n    if (!Array.from(ready.values()).includes(true)) return\r\n    return (\r\n      <>\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={{\r\n            ...OPTIONS,\r\n            chart: {\r\n              events: {\r\n                selection: (event) => {\r\n                  if (!event.resetSelection) {\r\n                    var min = event.xAxis[0].min;\r\n                    var max = event.xAxis[0].max;\r\n                    this.resetData(min, max)\r\n                  } else {\r\n                    this.setState({\r\n                      arr: this.cloneMap(data)\r\n                    })\r\n                  }\r\n                }\r\n              },\r\n              zoomType: 'x',\r\n              type: 'line'\r\n            },\r\n            xAxis: {\r\n              type: 'datetime',\r\n            },\r\n            yAxis: {\r\n              gridLineWidth: 0,\r\n              title: {\r\n                text: 'total stars',\r\n              },\r\n            },\r\n            series: Array.from(this.state.arr.values()).map(dataArray => dataArray[0]),\r\n          }}\r\n        />\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={{\r\n            ...OPTIONS,\r\n            chart: {\r\n              type: 'line',\r\n              zoomType: 'x',\r\n            },\r\n            xAxis: {\r\n              type: 'datetime',\r\n            },\r\n            yAxis: {\r\n              gridLineWidth: 0,\r\n              title: {\r\n                text: 'star increment/day',\r\n              },\r\n            },\r\n            series: Array.from(data.values()).map(dataArray => dataArray[1]),\r\n          }}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  // _renderLines = (dataIndex) => {\r\n  //   const { data, ready } = this.props\r\n  //   const dataReady = Array.from(ready.values())\r\n  //   console.log(\"Lines are rendered\")\r\n  //   return Array.from(data.values()).map((dataArray, index) => (\r\n  //     dataReady[index]\r\n  //       ?\r\n  //       <Line\r\n  //         type=\"monotone\"\r\n  //         key={`star-chart-total-${dataArray[dataIndex].name}`}\r\n  //         data={dataArray[dataIndex].data}\r\n  //         dataKey=\"value\"\r\n  //         name={dataArray[dataIndex].name}\r\n  //         stroke={COLORS[index]}\r\n  //         dot={false}\r\n  //       />\r\n  //       :\r\n  //     <></>\r\n  //   ))\r\n  // }\r\n\r\n  // _renderCharts = () => {\r\n  //   const { ready } = this.props\r\n\r\n  //   if (!Array.from(ready.values()).includes(true)) return\r\n\r\n  //   return (\r\n  //     <>\r\n  //     <Row>\r\n  //       <div>\r\n  //         <ResponsiveContainer width=\"100%\" height={300}>\r\n  //           <LineChart>\r\n  //             <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"2 7\" />\r\n  //             <Legend verticalAlign=\"top\"/>\r\n  //             <XAxis\r\n  //               dataKey=\"timestamp\"\r\n  //               scale=\"time\"\r\n  //               allowDuplicatedCategory={false}\r\n  //               type=\"number\"\r\n  //               domain = {['auto', 'auto']}\r\n  //               tickFormatter={ms => new Date(ms).toISOString().slice(0,10)}\r\n  //             />\r\n  //             <YAxis dataKey=\"value\" label={{ value: 'total stars', angle: -90, position: 'insideBottomLeft' }}/>\r\n  //             <ChartToolTip labelFormatter={ms => new Date(ms).toISOString().slice(0,10)}/>\r\n  //             {this._renderLines(0)}\r\n  //           </LineChart>\r\n  //         </ResponsiveContainer>\r\n  //       </div>\r\n  //       <div>\r\n  //         <ResponsiveContainer width=\"100%\" height={300}>\r\n  //           <LineChart>\r\n  //             <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"2 7\" />\r\n  //             <Legend verticalAlign=\"top\"/>\r\n  //             <XAxis\r\n  //               dataKey=\"timestamp\"\r\n  //               scale=\"time\"\r\n  //               allowDuplicatedCategory={false}\r\n  //               type=\"number\"\r\n  //               domain = {['auto', 'auto']}\r\n  //               tickFormatter={ms => new Date(ms).toISOString().slice(0,10)}\r\n  //             />\r\n  //             <YAxis dataKey=\"value\" label={{ value: 'daily increment', angle: -90, position: 'insideBottomLeft' }}/>\r\n  //             <ChartToolTip labelFormatter={ms => new Date(ms).toISOString().slice(0,10)}/>\r\n  //             {this._renderLines(1)}\r\n  //           </LineChart>\r\n  //         </ResponsiveContainer>\r\n  //       </div>\r\n  //     </Row>\r\n  //     </>\r\n  //   )\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this._renderStatistics()}\r\n        {this._renderCharts()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nStar.propTypes = {\r\n  id: PropTypes.string,\r\n  repos: PropTypes.array,\r\n  data: PropTypes.objectOf(Map),\r\n  stats: PropTypes.objectOf(Map),\r\n  ready: PropTypes.objectOf(Map),\r\n  loading: PropTypes.bool,\r\n}\r\n\r\n\r\nexport default Star","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Row, Statistic, Icon, Tag } from 'antd'\r\n// import { LineChart, Line, CartesianGrid, XAxis, YAxis, ResponsiveContainer, Legend, Tooltip as ChartToolTip } from 'recharts'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nimport COLORS from './Colors'\r\nimport OPTIONS from './ChartOptions'\r\n\r\n\r\nclass Fork extends React.Component {\r\n  static formatter = (repo, data) => {\r\n    // fprk total data, index 0\r\n    let total = { name: repo, data: [] }\r\n    // fork  daily increment data, index 1\r\n    let increment = { name: repo, data: [] }\r\n\r\n    let cumulativeCount = 0\r\n    data.forEach((value, key) => {\r\n      cumulativeCount += value\r\n      total.data.push([key, cumulativeCount])\r\n      increment.data.push([key, value])\r\n    })\r\n\r\n    return [total, increment]\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return !nextProps.loading && !Array.from(nextProps.ready.values()).includes(false)\r\n  }\r\n\r\n  _renderStatistics = () => {\r\n    const { stats, ready } = this.props\r\n\r\n    return (\r\n      <>\r\n      {Array.from(stats.entries()).map((\r\n        (pair, index) => {\r\n          if (ready.get(pair[0])) {\r\n            const { total, maxIncrement, createdAt } = pair[1]\r\n            const dateSinceCreated = Math.floor((Date.now() - new Date(createdAt).valueOf()) / (24*60*60*1000))\r\n            const averagePerDay = total / dateSinceCreated\r\n            return (\r\n              <div key={`fork-statistics-${pair[0]}`}>\r\n                <Row>\r\n                  <Tag color={COLORS[index]}>\r\n                    {pair[0]}\r\n                  </Tag>\r\n                  <Row type=\"flex\" align=\"middle\" justify=\"space-between\">\r\n                    <span className=\"stats-card\">\r\n                      <Statistic title=\"Total forks\" value={total} prefix={<Icon type=\"fork\" />} />\r\n                    </span>\r\n                    <span className=\"stats-card\">\r\n                      <Statistic title=\"Avg. forks/day\" value={averagePerDay} precision={2} />\r\n                    </span>\r\n                    <span className=\"stats-card\">\r\n                      <Statistic title=\"Max. forks/day\" value={maxIncrement} />\r\n                    </span>\r\n                  </Row>\r\n                </Row>\r\n              </div>\r\n            )\r\n          }\r\n          return false\r\n        }\r\n      ))}\r\n      </>\r\n    )\r\n  }\r\n\r\n  _renderCharts = () => {\r\n    const { data, ready } = this.props\r\n\r\n    if (!Array.from(ready.values()).includes(true)) return\r\n\r\n    return (\r\n      <>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={{ ...OPTIONS,\r\n          chart: {\r\n            type: 'line',\r\n            zoomType: 'x',\r\n          },\r\n          xAxis: {\r\n            type: 'datetime',\r\n          },\r\n          yAxis: {\r\n            gridLineWidth: 0,\r\n            title: {\r\n              text: 'total forks',\r\n            },\r\n          },\r\n          series: Array.from(data.values()).map(dataArray => dataArray[0]),\r\n        }}\r\n      />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={{ ...OPTIONS,\r\n          chart: {\r\n            type: 'column',\r\n            zoomType: 'x',\r\n          },\r\n          xAxis: {\r\n            type: 'datetime',\r\n          },\r\n          yAxis: {\r\n            gridLineWidth: 0,\r\n            title: {\r\n              text: 'fork increment/day',\r\n            },\r\n          },\r\n          series: Array.from(data.values()).map(dataArray => dataArray[1]),\r\n        }}\r\n      />\r\n      </>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      {this._renderStatistics()}\r\n      {this._renderCharts()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nFork.propTypes = {\r\n  id: PropTypes.string,\r\n  repos: PropTypes.array,\r\n  data: PropTypes.objectOf(Map),\r\n  stats: PropTypes.objectOf(Map),\r\n  ready: PropTypes.objectOf(Map),\r\n  loading: PropTypes.bool,\r\n}\r\n\r\n\r\nexport default Fork","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Row, Statistic, Icon, Tag } from 'antd'\r\n// import { LineChart, Line, CartesianGrid, XAxis, YAxis, ResponsiveContainer, Legend, Tooltip as ChartToolTip } from 'recharts'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nimport COLORS from './Colors'\r\nimport OPTIONS from './ChartOptions'\r\n\r\n\r\nclass Commit extends React.Component {\r\n  static formatter = (repo, data) => {\r\n    // commit total data, index 0\r\n    let total = { name: repo, data: [] }\r\n    // commit  daily increment data, index 1\r\n    let increment = { name: repo, data: [] }\r\n\r\n    let cumulativeCount = 0\r\n\r\n    // traversal backwards\r\n    Array.from(data.entries()).slice().reverse().forEach(\r\n      pair => {\r\n        cumulativeCount += pair[1]\r\n        total.data.push([pair[0], cumulativeCount])\r\n        increment.data.push([pair[0], pair[1]])\r\n      }\r\n    )\r\n\r\n    return [total, increment]\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return !nextProps.loading && !Array.from(nextProps.ready.values()).includes(false)\r\n  }\r\n\r\n  _renderStatistics = () => {\r\n    const { stats, ready } = this.props\r\n\r\n    return (\r\n      <>\r\n      {Array.from(stats.entries()).map((\r\n        (pair, index) => {\r\n          if (ready.get(pair[0])) {\r\n            const { total, maxIncrement, createdAt } = pair[1]\r\n            const dateSinceCreated = Math.floor((Date.now() - new Date(createdAt).valueOf()) / (24*60*60*1000))\r\n            const averagePerDay = total / dateSinceCreated\r\n            return (\r\n              <div key={`fork-statistics-${pair[0]}`}>\r\n                <Row>\r\n                  <Tag color={COLORS[index]}>\r\n                    {pair[0]}\r\n                  </Tag>\r\n                  <Row type=\"flex\" align=\"middle\" justify=\"space-between\">\r\n                    <span className=\"stats-card\">\r\n                      <Statistic title=\"Total commits\" value={total} prefix={<Icon type=\"history\" />} />\r\n                    </span>\r\n                    <span className=\"stats-card\">\r\n                      <Statistic title=\"Avg. commits/day\" value={averagePerDay} precision={2} />\r\n                    </span>\r\n                    <span className=\"stats-card\">\r\n                      <Statistic title=\"Max. commits/day\" value={maxIncrement} />\r\n                    </span>\r\n                  </Row>\r\n                </Row>\r\n              </div>\r\n            )\r\n          }\r\n          return false\r\n        }\r\n      ))}\r\n      </>\r\n    )\r\n  }\r\n\r\n  _renderCharts = () => {\r\n    const { data, ready } = this.props\r\n\r\n    if (!Array.from(ready.values()).includes(true)) return\r\n\r\n    return (\r\n      <>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={{ ...OPTIONS,\r\n          chart: {\r\n            type: 'line',\r\n            zoomType: 'x',\r\n          },\r\n          xAxis: {\r\n            type: 'datetime',\r\n          },\r\n          yAxis: {\r\n            gridLineWidth: 0,\r\n            title: {\r\n              text: 'total commits',\r\n            },\r\n          },\r\n          series: Array.from(data.values()).map(dataArray => dataArray[0]),\r\n        }}\r\n      />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={{ ...OPTIONS,\r\n          chart: {\r\n            type: 'column',\r\n            zoomType: 'x',\r\n          },\r\n          xAxis: {\r\n            type: 'datetime',\r\n          },\r\n          yAxis: {\r\n            gridLineWidth: 0,\r\n            title: {\r\n              text: 'commit increment/day',\r\n            },\r\n          },\r\n          series: Array.from(data.values()).map(dataArray => dataArray[1]),\r\n        }}\r\n      />\r\n      </>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      {this._renderStatistics()}\r\n      {this._renderCharts()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nCommit.propTypes = {\r\n  id: PropTypes.string,\r\n  repos: PropTypes.array,\r\n  data: PropTypes.objectOf(Map),\r\n  stats: PropTypes.objectOf(Map),\r\n  ready: PropTypes.objectOf(Map),\r\n  loading: PropTypes.bool,\r\n}\r\n\r\n\r\nexport default Commit","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport moment from 'moment'\r\n\r\nimport { Row, Statistic, Icon, Tag, Table } from 'antd'\r\n\r\nimport COLORS from './Colors'\r\n\r\nclass Release extends React.Component {\r\n\r\n  _render = () => {\r\n    const { stats, data, ready } = this.props\r\n\r\n    return (\r\n      <>\r\n      {Array.from(ready.entries()).map((\r\n        (pair, index) => {\r\n          if (pair[1]) { // ready\r\n            const { totalAssets, name, tagName, createdAt, totalDownloads } = stats.get(pair[0])\r\n\r\n            const dateSinceCreated = Math.floor((Date.now() - new Date(createdAt).valueOf()) / (24*60*60*1000))\r\n            const averageDownloadsPerDay = totalDownloads / dateSinceCreated\r\n\r\n            return (\r\n              <div key={`release-${pair[0]}`}>\r\n                <Row>\r\n                  <Tag color={COLORS[index]}>\r\n                    {pair[0]}\r\n                  </Tag>\r\n                </Row>\r\n                <Row type=\"flex\" align=\"middle\" justify=\"space-between\">\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Release tag\" value={tagName} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Release name\" value={name} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Total assets\" value={totalAssets} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Total asset downlaods\" value={totalDownloads} prefix={<Icon type=\"download\"/>} />\r\n                  </span>\r\n                  <span className=\"stats-card\">\r\n                    <Statistic title=\"Avg. downloads/day\" value={averageDownloadsPerDay} precision={2} />\r\n                  </span>\r\n                </Row>\r\n                <Row>\r\n                  <Table columns={columns} dataSource={data.get(pair[0])} pagination={false}/>\r\n                </Row>\r\n              </div>\r\n            )\r\n          }\r\n          return false\r\n        }\r\n      ))}\r\n      </>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      {this._render()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Asset',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n  },\r\n  {\r\n    title: 'Content type',\r\n    dataIndex: 'contentType',\r\n    key: 'contentType',\r\n  },\r\n  {\r\n    title: 'Downloads',\r\n    dataIndex: 'downloadCount',\r\n    key: 'downloadCount',\r\n  },\r\n  {\r\n    title: 'Created at',\r\n    dataIndex: 'createdAt',\r\n    key: 'createdAt',\r\n    render: time => moment(time).format(\"MMMM Do YYYY, h:mm:ss a\")\r\n  },\r\n  {\r\n    title: 'Updated at',\r\n    dataIndex: 'updatedAt',\r\n    key: 'updatedAt',\r\n    render: time => moment(time).format(\"MMMM Do YYYY, h:mm:ss a\")\r\n  },\r\n\r\n]\r\n\r\n\r\nRelease.propTypes = {\r\n  id: PropTypes.string,\r\n  repos: PropTypes.array,\r\n  data: PropTypes.objectOf(Map),\r\n  stats: PropTypes.objectOf(Map),\r\n  ready: PropTypes.objectOf(Map),\r\n}\r\n\r\n\r\nexport default Release","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n// import _ from 'lodash'\r\n\r\nimport TYPES from './DataTypes'\r\nimport '../css/DataSection.css'\r\n\r\nimport { Progress, Button, Row, Icon, Tag, Popover } from 'antd'\r\nimport GithubFetcher from '../scripts/GithubFetcher'\r\n\r\nimport Repository from './sections/Repository'\r\nimport Star from './sections/Star'\r\nimport Fork from './sections/Fork'\r\nimport Commit from './sections/Commit'\r\nimport Release from './sections/Release'\r\n\r\nclass DataSection extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      progress: new Map(),\r\n      data: new Map(),\r\n      stats: new Map(),\r\n      visible: new Map(),\r\n      ready: new Map(),\r\n      loading: false,\r\n    }\r\n\r\n    const { githubApiToken, type } = this.props\r\n\r\n    this.fetcher = new GithubFetcher(githubApiToken)\r\n\r\n    switch (type) {\r\n      case TYPES.REPO:\r\n        this.icon = <Icon type=\"book\" style={{ fontSize: '24px', color: '#333333' }} />\r\n        this.body = Repository\r\n        this.fetchCall = this.fetcher.fetchRepositoryData\r\n        break\r\n      case TYPES.STAR:\r\n        this.info = 'Star trend data are huge, they might take minutes to load.'\r\n        this.icon = <Icon type=\"star\" style={{ fontSize: '24px', color: '#ffb900' }} />\r\n        this.body = Star\r\n        this.fetchCall = this.fetcher.fetchStargazerData\r\n        break\r\n      case TYPES.FORK:\r\n        this.icon = <Icon type=\"fork\" style={{ fontSize: '24px', color: '#333333' }} />\r\n        this.body = Fork\r\n        this.fetchCall = this.fetcher.fetchForkData\r\n        break\r\n      case TYPES.COMMIT:\r\n        this.info = 'Because of the API restriction, only commits in a recent year will be loaded.'\r\n        this.icon = <Icon type=\"history\" style={{ fontSize: '24px', color: '#333333' }} />\r\n        this.body = Commit\r\n        this.fetchCall = this.fetcher.fetchCommitData\r\n        break\r\n      case TYPES.RELEASE:\r\n        this.icon = <Icon type=\"tag\" style={{ fontSize: '24px', color: '#333333' }} />\r\n        this.body = Release\r\n        this.fetchCall = this.fetcher.fetchReleaseData\r\n        break\r\n      default:\r\n        console.log('TYPE DOESNOT EXIST')\r\n        return 'ERROR'\r\n    }\r\n\r\n    // data formatter\r\n    this.formatter = this.body.formatter\r\n  }\r\n\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { deleteRepo, repos } = this.props\r\n    const { data, stats, progress, visible, loading, ready } = this.state\r\n\r\n    // delete repo out\r\n    if (deleteRepo !== prevProps.deleteRepo && deleteRepo !== '') {\r\n      data.delete(deleteRepo)\r\n      stats.delete(deleteRepo)\r\n      progress.delete(deleteRepo)\r\n      ready.delete(deleteRepo)\r\n      visible.delete(deleteRepo)\r\n      this.setState({ data, stats, progress, ready, visible, loading: this._getAllProgress() !== 100 && loading && repos.length !== 0 })\r\n    }\r\n\r\n    // new repo in\r\n    if (prevProps.repos !== repos && deleteRepo === '') {\r\n      const newRepo = repos.filter(repo => !prevProps.repos.includes(repo))\r\n      newRepo.forEach(repo => {\r\n        data.set(repo, {})\r\n        stats.set(repo, {})\r\n        progress.set(repo, 0)\r\n        ready.set(repo, false)\r\n        visible.set(repo, true)\r\n        this.setState({ data, stats, progress, ready, visible })\r\n        if (loading) {\r\n          this._fetch(repo)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * fetching from a specific repository\r\n   * for a specific data type from DataTypes.js\r\n   * @param repo repo to fectch\r\n   * @returns exit status string\r\n   */\r\n  _fetch = repo => {\r\n    const { repos } = this.props\r\n    const slashIndex = repo.indexOf('/')\r\n    const owner = repo.slice(0, slashIndex)\r\n    const name = repo.slice(slashIndex + 1)\r\n\r\n    const onUpdate = data => {\r\n      if(this.state.data.has(repo)) {\r\n        this.state.data.set(\r\n          repo,\r\n          this.formatter ? this.formatter(repo, data) : data,\r\n        )\r\n        this.setState({ data: this.state.data })\r\n      }\r\n    }\r\n    const onFinish = stats => {\r\n      if(this.state.stats.has(repo)) {\r\n        this.state.stats.set(repo, stats)\r\n        this.state.ready.set(repo, true)\r\n        this.setState({ stats: this.state.stats, ready: this.state.ready})\r\n      }\r\n      if (this._getAllProgress() === 100) {\r\n        this.setState({ loading: false })\r\n      }\r\n    }\r\n    const onProgress = progress => {\r\n      if(this.state.progress.has(repo)) {\r\n        this.state.progress.set(repo,progress)\r\n        this.setState({\r\n          progress:this.state.progress\r\n        })\r\n      }\r\n    }\r\n    const shouldAbort = () => {\r\n      // if (this._getAllProgress() === 100) {\r\n      //   this.setState({ loading: false })\r\n      // }\r\n      return !repos.includes(repo)\r\n    }\r\n\r\n    this.fetchCall(\r\n      owner, name,\r\n      onUpdate,\r\n      onFinish,\r\n      onProgress,\r\n      shouldAbort,\r\n    )\r\n\r\n    return 'FETCH REQUESTED'\r\n  }\r\n\r\n  /**\r\n   * get progress of fetching all\r\n   * @returns progress as number from 0 to 100\r\n   */\r\n  _getAllProgress = () => {\r\n    const { progress } = this.state\r\n    return Math.floor(Array.from(progress.values()).reduce((a, b) => a + b, 0)/ (progress.size === 0 ? 1 : progress.size))\r\n  }\r\n\r\n  _renderUpdateAllButton = () => {\r\n    const { loading, ready } = this.state\r\n    const { repos } = this.props\r\n\r\n    return (\r\n      <Button\r\n        icon=\"cloud-download\"\r\n        type=\"link\"\r\n        disabled={repos.length === 0}\r\n        onClick={() => {\r\n          this.setState({ loading: true })\r\n          if (this._getAllProgress() === 100) { // re-fetch all\r\n            repos.forEach(repo => this._fetch(repo))\r\n          }\r\n          else { // on fetch unfetched\r\n            repos.forEach(repo => {\r\n              if (!ready.get(repo)) {\r\n                this._fetch(repo)\r\n              }\r\n            })\r\n          }\r\n        }}\r\n        loading={loading}\r\n      >\r\n        update\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  _renderRepoTags = () => {\r\n    const { progress, visible } = this.state\r\n    const { repos } = this.props\r\n\r\n    return (\r\n      repos.map(repo => (\r\n        <div key={\"section-tag\" + repo} style={{ display: 'inline-block'}}>\r\n          <Progress\r\n            type=\"circle\"\r\n            percent={progress.get(repo)}\r\n            showInfo={false}\r\n            strokeWidth={8}\r\n            width={16}\r\n          />\r\n          <Tag\r\n            className=\"repo-tag\"\r\n            checked={visible.get(repo)}\r\n            onChange={checked => {\r\n              visible.set(repo, checked)\r\n              this.setState({ visible })\r\n            }}\r\n          >\r\n            {repo}\r\n          </Tag>\r\n        </div>\r\n      ))\r\n    )\r\n  }\r\n\r\n  _renderBody = () => {\r\n    const { data, stats, ready, loading } = this.state\r\n    const { repos } = this.props\r\n\r\n    return <this.body repos={repos} data={data} stats={stats} ready={ready} loading={loading}/>\r\n  }\r\n\r\n  render() {\r\n    const { type } = this.props\r\n\r\n    return (\r\n      <div id={type}>\r\n        <Row type=\"flex\" align=\"middle\" className=\"section-header\">\r\n          <div className=\"data-card\">\r\n            {this.icon}\r\n            <div className=\"section-title\">\r\n              {type}\r\n            </div>\r\n            {this.info ?\r\n              <Popover className=\"info-tag\" content={this.info} placement=\"left\">\r\n                <Icon type=\"info-circle\" />\r\n              </Popover> : null }\r\n          </div>\r\n          <div className=\"data-card\"  style={{ marginLeft: 'auto' }}>\r\n            {this._renderRepoTags()}\r\n          </div>\r\n          <Progress\r\n            type=\"circle\"\r\n            strokeWidth={4}\r\n            width={32}\r\n            percent={this._getAllProgress()}\r\n          />\r\n          <div className=\"data-card\">\r\n            {this._renderUpdateAllButton()}\r\n          </div>\r\n        </Row>\r\n        {this._renderBody()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nDataSection.propTypes = {\r\n  githubApiToken: PropTypes.string,\r\n  repos: PropTypes.array,\r\n  deleteRepo: PropTypes.string,\r\n  type: PropTypes.string,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  githubApiToken: state.github.githubApiToken\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n)(DataSection)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\n\r\nimport TYPES from './DataTypes'\r\nimport COLORS from './sections/Colors'\r\n\r\nimport { Row, Col, Anchor, Button, Tag, Tooltip, message, Select } from 'antd'\r\n\r\nimport DataSection from './DataSection'\r\n\r\nimport GithubFetcher from '../scripts/GithubFetcher'\r\n\r\nimport { updateState } from '../actions'\r\n\r\n// const CENTER_FLEX = { display: 'flex', placeContent: 'center' }\r\n// const CENTER_LEFT_FLEX = { display: 'flex', justifyContent: 'flex-start', alignContent: 'center'}\r\n\r\n// message.config({\r\n//   top: 60,\r\n//   duration: 2,\r\n//   maxCount: 5,\r\n// })\r\n\r\nclass GithubStatistics extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      repos:[],\r\n      input: undefined,\r\n      suggestions: [],\r\n      testingRepo: false,\r\n      deleteRepo: '',\r\n    }\r\n\r\n    this.fetcher = new GithubFetcher('05c1acf261f6b223411c73d8b71cb1a30ce9186a')\r\n\r\n    this.props.updateState(\"githubApiToken\", '05c1acf261f6b223411c73d8b71cb1a30ce9186a')\r\n\r\n    this.search = _.debounce(\r\n      this.fetcher.searchRepository,\r\n      300,\r\n      { leading: false, trailing: true }\r\n    ).bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      repos: JSON.parse(localStorage.getItem(\"repos\")),\r\n      deleteRepo: '',\r\n    })\r\n  }\r\n\r\n  deleteRepo = index => {\r\n    const { repos } = this.state\r\n    const deleteRepo = repos[index]\r\n    repos.splice(index, 1)\r\n    this.setState({\r\n      repos: [...repos],\r\n      deleteRepo: deleteRepo,\r\n    }, () => {\r\n      localStorage.setItem(\"repos\", JSON.stringify([...repos]))\r\n    })\r\n  }\r\n\r\n  addRepo = repo => {\r\n    const { repos } = this.state\r\n    if (repos.includes(repo)) {\r\n      message.error(`${repo} is already added`)\r\n    }else {\r\n      this.setState({\r\n        repos: [ ...repos, repo],\r\n        deleteRepo: '',\r\n      }, () => {\r\n        localStorage.setItem(\"repos\", JSON.stringify([...repos, repo]))\r\n      })\r\n    }\r\n  }\r\n\r\n  // _handleAdding = repo => {\r\n  //   const slashIndex = repo.indexOf('/')\r\n  //   const owner = repo.slice(0, slashIndex)\r\n  //   const name = repo.slice(slashIndex + 1)\r\n\r\n  //   this.setState({ testingRepo: true })\r\n  //   this.fetcher.testRepository(owner, name,\r\n  //     result => {\r\n  //       this.setState({ testingRepo: false })\r\n  //       if (result) {\r\n  //         this.addRepo(repo)\r\n  //         message.success(repo + ' added')\r\n  //       } else {\r\n  //         message.error('Repository not found')\r\n  //       }\r\n  //     }\r\n  //   )\r\n  // }\r\n\r\n  _renderTags = () => {\r\n    const { repos } = this.state\r\n\r\n    return (\r\n      repos.map((repo, index) => (\r\n        <Tag key={\"tag\" + repo} color={COLORS[index]} closable onClose={() => this.deleteRepo(index)}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://github.com/${repo}`}>{repo}</a>\r\n        </Tag>\r\n      ))\r\n    )\r\n  }\r\n\r\n  _renderHeaderInput = () => {\r\n    const { repos, input, testingRepo, suggestions } = this.state\r\n\r\n    // const format = /^[a-z\\d](?:[a-z\\d]|-(?=[a-z\\d])){0,38}\\/{1}[a-z\\d](?:[a-z\\d]|-(?=[a-z\\d])){0,38}$/i\r\n    let hintMessage = ''\r\n\r\n    // Conditions\r\n    const inputEmpty = input === undefined\r\n    // const formatIncorrect = !format.test(input)\r\n    const repoExisted = repos.includes(input)\r\n\r\n    if (repoExisted) hintMessage = 'Repository already added'\r\n    // if (formatIncorrect) hintMessage = 'Input incorrectly formatted'\r\n    if (inputEmpty) hintMessage = 'Empty'\r\n\r\n    const disabled = inputEmpty || repoExisted\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {/* <Input\r\n          className=\"header-input\"\r\n          prefix={<Icon type=\"github\"/>}\r\n          placeholder=\"owner/name\"\r\n          value={input}\r\n          onChange={e => {\r\n            this.setState({ input: e.target.value })\r\n            this.fetcher.searchRepository(e.target.value, suggestions => this.setState({ suggestions }))\r\n          }}\r\n          onPressEnter={() => !disabled && this._handleAdding(input)}\r\n          disabled={testingRepo}\r\n          allowClear\r\n        /> */}\r\n        <Select\r\n          className=\"header-input\"\r\n          value={input}\r\n          placeholder=\"search by repository\"\r\n          defaultActiveFirstOption={false}\r\n          onChange={input => {\r\n            this.setState({ input })\r\n            this.addRepo(input)\r\n          }}\r\n          onSearch={input => this.search(input, suggestions => this.setState({ suggestions }))}\r\n          notFoundContent={null}\r\n          showArrow={false}\r\n          filterOption={false}\r\n          showSearch\r\n        >\r\n          {suggestions.map(repo => (\r\n            <Select.Option key={`suggestion-${repo}`} value={repo}>{repo}</Select.Option>\r\n          ))}\r\n        </Select>\r\n        <Tooltip\r\n          title={hintMessage}\r\n        >\r\n          <Button\r\n            icon=\"plus\"\r\n            type=\"primary\"\r\n            loading={testingRepo}\r\n            disabled={disabled}\r\n            onClick={() => this.addRepo(input)}\r\n          />\r\n        </Tooltip>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    // const dotStyle = {strokeWidth: 2, r: 2.5}\r\n    const { repos, deleteRepo } = this.state\r\n\r\n    return (\r\n      <div>\r\n        <header className=\"header\">\r\n          <Row type=\"flex\" align=\"middle\">\r\n            <Col className=\"header-section\">\r\n              <a className=\"header-title\" href=\"/\">\r\n                Github Stats\r\n              </a>\r\n            </Col>\r\n            <iframe src=\"https://ghbtns.com/github-btn.html?user=vesoft-inc&repo=github-statistics&type=star&count=true\" frameBorder=\"0\" scrolling=\"0\" width=\"100px\" height=\"20px\" />\r\n            <Col className=\"header-section flex-center\">\r\n              {this._renderHeaderInput()}\r\n            </Col>\r\n            <Col className=\"header-section flex-center-left\">\r\n              {this._renderTags()}\r\n            </Col>\r\n          </Row>\r\n        </header>\r\n        <div className=\"container\">\r\n          <div className=\"sider\">\r\n            <Anchor bounds={0} className=\"anchor\">\r\n              {Object.values(TYPES).map(value => (\r\n                <Anchor.Link key={`anchor-link-${value}`} title={value} href={`#${value}`}/>\r\n              ))}\r\n            </Anchor>\r\n          </div>\r\n\r\n          <div className=\"content\" >\r\n            <DataSection\r\n              type={TYPES.REPO}\r\n              repos={repos}\r\n              deleteRepo={deleteRepo}\r\n            />\r\n\r\n            <DataSection\r\n              type={TYPES.STAR}\r\n              repos={repos}\r\n              deleteRepo={deleteRepo}\r\n            />\r\n\r\n            <DataSection\r\n              type={TYPES.FORK}\r\n              repos={repos}\r\n              deleteRepo={deleteRepo}\r\n            />\r\n\r\n            <DataSection\r\n              type={TYPES.COMMIT}\r\n              repos={repos}\r\n              deleteRepo={deleteRepo}\r\n            />\r\n\r\n            <DataSection\r\n              type={TYPES.RELEASE}\r\n              repos={repos}\r\n              deleteRepo={deleteRepo}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <footer className=\"footer\">\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nGithubStatistics.propTypes = {\r\n  updateState: PropTypes.func,\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateState: (state, data) => dispatch(updateState(state, data)),\r\n})\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps,\r\n)(GithubStatistics)","export const updateState = (state, data) => ({\r\n  type: 'UPDATE_STATE',\r\n  payload: { state, data }\r\n})\r\n\r\nexport const updateStatsField = (state, stats) => ({\r\n  type: 'UPDATE_STATS_FIELD',\r\n  payload: { state, stats }\r\n})","import React from 'react'\r\nimport GithubStatistics from './GithubStatistics'\r\nimport '../css/App.css'\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <GithubStatistics />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport reducers from './reducers'\r\n\r\nimport './css/normalize.css'\r\nimport './css/index.css'\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst store = createStore(reducers)\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.Fragment>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}